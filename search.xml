<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring监听机制实战</title>
      <link href="/2022/03/01/spring-jian-ting-ji-zhi-shi-zhan/"/>
      <url>/2022/03/01/spring-jian-ting-ji-zhi-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><ul><li>Spring中事件机制：ApplicationEventPublisher，实现监听ApplicationEvent，最后利用事件通知实现通知实现异步操作。</li></ul><h3 id="为什么异步操作："><a href="#为什么异步操作：" class="headerlink" title="为什么异步操作："></a>为什么异步操作：</h3><ul><li>在有多个上下游服务的情况下，服务之间互相调用，存在耗时，当我们调用方不需要此操作返回时，可以异步执行，调用接口，该接口快速返回，减少接口响应时长。</li><li>代码逻辑性清晰，对于需要多个异步操作的可以实现事件的统一管理，不用创建线程池，减少资源的消耗。</li></ul><h3 id="demo流程图："><a href="#demo流程图：" class="headerlink" title="demo流程图："></a>demo流程图：</h3><p><img src="https://gitee.com/codePigPig/blogImages/raw/master/uPic/1646106176683-596cb5ff-a107-467c-a765-8551b7542a58-20220301115133502.png" alt="img"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="创建事件"><a href="#创建事件" class="headerlink" title="创建事件"></a>创建事件</h4><ul><li>创建事件实体类</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 消息 * @author: wangzhibu * @date: 2022/2/25 2:27 下午 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageEventDto</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用户ID     */</span>    <span class="token keyword">private</span> Integer userId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 手机号     */</span>    <span class="token keyword">private</span> String mobile<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 短信模版参数数据体     */</span>    <span class="token keyword">private</span> String data<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构造方法和getter、setter方法省略..</span>    <span class="token punctuation">}</span></code></pre><ul><li>创建事件，继承ApplicationEvent</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 事件 * @author: wangzhibu * @date: 2022/2/25 2:29 下午 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> SendMessageEventDto sendMessageEventDto<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SendMessageEvent</span><span class="token punctuation">(</span>Object source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SendMessageEvent</span><span class="token punctuation">(</span>Object source<span class="token punctuation">,</span>SendMessageEventDto dto<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sendMessageEventDto <span class="token operator">=</span> dto<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> SendMessageEventDto <span class="token function">getSendMessageEventDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sendMessageEventDto<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSendMessageEventDto</span><span class="token punctuation">(</span>SendMessageEventDto sendMessageEventDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sendMessageEventDto <span class="token operator">=</span> sendMessageEventDto<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="创建监听类"><a href="#创建监听类" class="headerlink" title="创建监听类"></a>创建监听类</h4><ul><li>监听类，主要作用是做监听后的逻辑操作</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 监听类 * @author: wangzhibu * @date: 2022/2/25 2:58 下午 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Async</span>    <span class="token annotation punctuation">@EventListener</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>SendMessageEvent sendMessageEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            SendMessageEventDto dto <span class="token operator">=</span> sendMessageEvent<span class="token punctuation">.</span><span class="token function">getSendMessageEventDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"模拟发送短信通知 -> 数据体为 -> "</span><span class="token operator">+</span> dto<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="创建业务类"><a href="#创建业务类" class="headerlink" title="创建业务类"></a>创建业务类</h4><ul><li>让具体业务持有该事件，并设置被监听状体</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @description: 模拟业务 * @author: wangzhibu * @date: 2022/2/25 2:51 下午 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SendMessageService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ApplicationEventPublisher applicationEventPublisher<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publishMessage</span><span class="token punctuation">(</span>String mobile<span class="token punctuation">,</span> Integer userId<span class="token punctuation">,</span> String data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SendMessageEvent event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendMessageEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SendMessageEventDto dto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SendMessageEventDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dto<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        dto<span class="token punctuation">.</span><span class="token function">setMobile</span><span class="token punctuation">(</span>mobile<span class="token punctuation">)</span><span class="token punctuation">;</span>        dto<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        event<span class="token punctuation">.</span><span class="token function">setSendMessageEventDto</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将事件交给spring监听</span>        applicationEventPublisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> cn<span class="token punctuation">.</span>study<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>SendMessageService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @description: 测试类 * @author: wangzhibu * @date: 2022/2/25 3:46 下午 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringListenerTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> SendMessageService sendMessageService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sendMessageService<span class="token punctuation">.</span><span class="token function">publishMessage</span><span class="token punctuation">(</span><span class="token string">"18580770760"</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token string">"测试spring监听"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring监听机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序-03-快速排序</title>
      <link href="/2021/12/29/pai-xu-03-kuai-su-pai-xu/"/>
      <url>/2021/12/29/pai-xu-03-kuai-su-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="排序-03-快速排序"><a href="#排序-03-快速排序" class="headerlink" title="排序-03-快速排序"></a>排序-03-快速排序</h1><p>概述</p><ul><li>快速排序原理是首先要找到一个中枢，把小于中枢的值放到他前面，大于中枢的值放到 他的右边，然后再以此方法对这两部分数据分别进行快速排序。</li></ul><p>代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 快速排序 * 输入：3,44,38,5,47,15,36,26,27,2,46,4,19,50,48 * 输出：2,3,4,5,15,19,26,27,36,38,44,46,47,48,50 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当开始不小于结束，说明当前循环排序完成</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> center <span class="token operator">=</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每次将第一个值设置为中心元素</span>            <span class="token keyword">int</span> save <span class="token operator">=</span> start<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录存储位置</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start <span class="token operator">+</span>  <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end  <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> center<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">++</span>save<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>save<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>save<span class="token punctuation">]</span> <span class="token operator">=</span> center<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 处理小于中心元素值</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> save <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 处理大于中心元素值</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> save <span class="token operator">+</span>  <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 异或运算，同一个字符进行两次异或运算就会回到原来的值。</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 常见排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序-02-选择排序</title>
      <link href="/2021/12/29/pai-xu-02-xuan-ze-pai-xu/"/>
      <url>/2021/12/29/pai-xu-02-xuan-ze-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="排序-02-选择排序"><a href="#排序-02-选择排序" class="headerlink" title="排序-02-选择排序"></a>排序-02-选择排序</h1><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>选择排序和冒泡排序有一点点相似，选择排序在第一层循环中，默认前面的都已经排好序了。</li><li>首先第一轮循环的时候默认的排序好的为空，然后从后面选择最小的放到数组的第一个位置，第二轮循环的时候默认第一个元素已经是排好序好的，然后从剩下的最小值放到数组的第二个位置，第三轮循环的时候默认前面两个元素都已经排好序了，然后再从剩下的选择一个最小的值放到数组的第三个位置，以此类推。</li></ul><h4 id="算法动画"><a href="#算法动画" class="headerlink" title="算法动画"></a>算法动画</h4><p><img src="https://gitee.com/codePigPig/blogImages/raw/master/uPic/%E6%8E%92%E5%BA%8F-02-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-20211229142730030.gif" alt="排序-02-选择排序"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> leetcode<span class="token punctuation">.</span>arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 选择排序 * 输入：3,7,2,4,1,5 * 输出：1,2,3,4,5,7 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">selectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第一层循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 第二层循环</span>            min <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 记录每次最小值的下标</span>                    min <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 判断最小值下标发生了改变才进行交换。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 异或运算，同一个字符进行两次异或运算就会回到原来的值。</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>最终输出：<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span></code></pre><h4 id="递归方式"><a href="#递归方式" class="headerlink" title="递归方式"></a>递归方式</h4><ul><li>递归方式主要是需要判断当下标大于数组最大值就退出递归和每次循环的开始下标，排序的思想和选择排序一样。</li></ul><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用递归的方式</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果下标大于数组最大值，就退出递归</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将每次递归的下标标记为初始的最小值的下标</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断最小值下标发生了改变才进行交换。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">selectSort2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="错误示范"><a href="#错误示范" class="headerlink" title="错误示范"></a>错误示范</h4><p>解析:</p><ul><li>刚开始想的是<code>min</code>最小值找出来，进行对比后，然后记录下每次找到的最小值下标<code>position</code>然后进行交换。</li><li>欠缺考虑，如果循环中排序没有变化，依然进行了<code>swap</code>导致顺序乱了。</li><li>而且如果相同的值相互进行异或，会导致数组中值直接为0。</li></ul><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min<span class="token punctuation">;</span>        <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第一层循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 第二层循环</span>            min <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    min <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    position <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>最终输出：<span class="token number">123750</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> 常见排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 选择排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序-01-冒泡排序</title>
      <link href="/2021/12/28/pai-xu-01-mou-pao-pai-xu/"/>
      <url>/2021/12/28/pai-xu-01-mou-pao-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="排序-01-冒泡排序"><a href="#排序-01-冒泡排序" class="headerlink" title="排序-01-冒泡排序"></a>排序-01-冒泡排序</h1><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class=" language-java"><code class="language-java">输入：<span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span>输出：<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span></code></pre><h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><p>解析：</p><ul><li>首先拿到第一个元素和后面的所有值一个一个比较，如果比后面的大就交换，始终保持第一个元素是最小的，然后再从第二个第三个，依次类推。</li></ul><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 始终将最小的放在最前面</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><p>排序动画：</p><p><img src="https://gitee.com/codePigPig/blogImages/raw/master/uPic/%E6%8E%92%E5%BA%8F-01-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="排序-01-冒泡排序"></p><p>解析：</p><ul><li><p>每次循环的时候j都从0开始，并且是相邻两个元素的比较，所以第一轮比完之后会把最大的值放在数组的最后一位，第二轮的时候会吧第二大的值放在数组的倒数第二位置，依次类推。</p></li><li><p>与第一种的区别：第一种把小的往前排，第二种每次循环把大的往后排。</p></li></ul><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  冒泡排序 *  输入：1,3,5,2,4,6,2 *  输出：1,2,2,3,4,5,6 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 相邻的两个值进行比较，注意下标</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 交换方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 异或运算，同一个字符进行两次异或运算就会回到原来的值。</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优化：</p><ul><li>优化冒泡排序，如果后面的已经排好序的时候就不需要交换了，终止循环</li></ul><p>代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> location<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化最后交换位置为最后一个元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            location <span class="token operator">=</span> count<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> location <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr <span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 每次交换，记录无序位置，有序从j+1开始，</span>                    count <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果没有次序交换，排序完成</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>location <span class="token operator">==</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>解析：</p><ul><li>每次大循环中，都将最大值向后移，<code>count = j</code>将每次循环最大值交换的节点记录，<code>localtion</code>表示后面每次还需要循环多少次。如果没有进行交换，<code>count</code>就没有发生改变，<code>localtion == count</code>就表示排序是完成的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 常见排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 冒泡排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows常用快捷键+Dos命令</title>
      <link href="/2021/12/23/windows-chang-yong-kuai-jie-jian-dos-ming-ling/"/>
      <url>/2021/12/23/windows-chang-yong-kuai-jie-jian-dos-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows常用快捷键-Dos命令"><a href="#Windows常用快捷键-Dos命令" class="headerlink" title="Windows常用快捷键+Dos命令"></a>Windows常用快捷键+Dos命令</h1><p>键盘功能键：</p><ul><li>Tab </li><li>Shift</li><li>Ctrl</li><li>Alt</li><li>空格</li><li>Enter</li><li>Window</li><li>⬆️⬇️⬅️➡️</li></ul><p>常用快捷键：</p><ul><li>Ctrl+C    ：复制</li><li>Ctrl+V    ：粘贴</li><li>Ctrl+C    ：全选</li><li>Ctrl+X    ：剪切</li><li>Ctrl+Z    ：撤销</li><li>Ctrl+S    ：保存</li><li>Alt+F4    ：关闭窗口</li><li>Shift+Delete    ：永久删除</li><li>Win+R    ：运行窗口</li><li>Win+E    ：打开我的电脑</li><li>Ctrl+Shift+Esc    ：打开任务管理器 </li></ul><h2 id="win10-DOS命令："><a href="#win10-DOS命令：" class="headerlink" title="win10 DOS命令："></a>win10 DOS命令：</h2><p>打开CMD命令提示符的方式</p><ul><li>开始+系统+命令提示符</li><li>Win+R 输入CMD打开控制台</li><li>在任意的文件夹下，按住Shift键+鼠标右键点击，在此处打开Powershell</li><li>资源管理器的地址栏前面加上CMD+空格+路径</li></ul><p>运行方式：</p><ul><li>选择以管理员方式运行</li></ul><p>常用的Dos命令：</p><pre><code>#盘符切换E:#查看当前目录下的所有文件dir#切换目录cd change dirctorycd /d 盘符:\  ：切换不同盘符，需要加/d#返回目录上一级cd ..#清理命令行屏幕cls(clear screen)#查看IP地址ipconfig#打开应用calc：计算器#ping命令ping www.baidu.com#创建文件夹md filename#删除文件del filename</code></pre>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+Markdown基础使用学习</title>
      <link href="/2021/12/23/typora-markdown-ji-chu-shi-yong-xue-xi/"/>
      <url>/2021/12/23/typora-markdown-ji-chu-shi-yong-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora-Markdown基础使用学习"><a href="#Typora-Markdown基础使用学习" class="headerlink" title="Typora+Markdown基础使用学习"></a>Typora+Markdown基础使用学习</h1><h4 id="Typora简介："><a href="#Typora简介：" class="headerlink" title="Typora简介："></a>Typora简介：</h4><p>Typora给您既是读者又是作家的无缝体验。它删除了预览窗口，模式切换器，降价源代码的语法符号以及所有其他不必要的干扰。相反，它提供了真正的实时预览功能，可帮助您专注于内容本身。</p><h4 id="Markdown简介："><a href="#Markdown简介：" class="headerlink" title="Markdown简介："></a>Markdown简介：</h4><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><h2 id="一、标题："><a href="#一、标题：" class="headerlink" title="一、标题："></a>一、标题：</h2><p>简述：标题主要以#号表示，一个#号一级标题，##号为二级标题</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题        （快捷键：Command+1）</span><span class="token title important"><span class="token punctuation">##</span> 二级标题        （快捷键：Command+2）</span><span class="token title important"><span class="token punctuation">###</span> 三级标题        （快捷键：Command+3）</span><span class="token title important"><span class="token punctuation">####</span> 四级标题    （快捷键：Command+4）</span></code></pre><p>效果演示：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><p>简述：主要是用*、～～号将字体内容包起来，下面``是代码修饰， 实际修饰字体时不加</p><pre class=" language-markdown"><code class="language-markdown">加粗：<span class="token code keyword">`**Hello,world**`</span>        （快捷键：Command+B）倾斜：<span class="token code keyword">`*Hello,world*`</span>（快捷键：Command+I）加粗+倾斜：<span class="token code keyword">`***Hello,world***`</span>删除线：<span class="token code keyword">`~~Hello,world~~`</span>（快捷键：Control+Caps Lock+`）下划线：<span class="token code keyword">`&lt;u>Hello,world&lt;/u>`</span>（快捷键：Command+U）</code></pre><p>效果展示：</p><p>加粗：<strong>Hello,World!</strong></p><p>倾斜：<em>Hello,world!</em></p><p>加粗+倾斜：<em><strong>Hello,world</strong></em></p><p>删除线：<del>Hello,world</del></p><p>下划线：<u>Hello,world</u></p><h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><p>简述：主要用到&gt;符号，在需要引用的文字加上&gt;</p><pre class=" language-markdown"><code class="language-markdown">语法：<span class="token blockquote punctuation">></span>引用内容</code></pre><p>效果展示：</p><blockquote><p>引用内容</p></blockquote><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>简述：主要用到*和-符号</p><pre class=" language-markdown"><code class="language-markdown"><span class="token hr punctuation">***</span><span class="token hr punctuation">---</span></code></pre><p>效果展示：</p><p>***：</p><hr><p>—：</p><hr><h2 id="五、超链接"><a href="#五、超链接" class="headerlink" title="五、超链接"></a>五、超链接</h2><p>简述：主要用到[]、()</p><pre class=" language-markdown"><code class="language-markdown">语法：<span class="token url">[超链接名字](超链接URL)</span>示例：<span class="token url">[我的个人网站](http://www.mywzb.com/)</span></code></pre><p>效果展示：</p><h4 id="我的个人网站"><a href="#我的个人网站" class="headerlink" title="我的个人网站"></a><a href="http://www.mywzb.com/">我的个人网站</a></h4><h2 id="六、图片"><a href="#六、图片" class="headerlink" title="六、图片"></a>六、图片</h2><p>简述：主要用到 !、[]、()</p><pre class=" language-markdown"><code class="language-markdown">语法<span class="token url">![图片alt](本级图片地址/图片超链接)</span>         （快捷键：control+command+U）示例：![展示用图](http://img08.tooopen.com/20210122/tooopen<span class="token italic"><span class="token punctuation">_</span>sl<span class="token punctuation">_</span></span>11045245217944.jpg "这是一张美景图")注明：</code></pre><p>效果展示：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b42c38f5bdf6d64e2bb06f450652f6c1.png" alt="图片展示"></p><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><h5 id="无序列表："><a href="#无序列表：" class="headerlink" title="无序列表："></a>无序列表：</h5><p>简述：主要用到-、+、*</p><pre class=" language-markdown"><code class="language-markdown">语法：<span class="token list punctuation">-</span> 列表内容                        （快捷键：Option+Command+O）<span class="token list punctuation">+</span> 列表内容<span class="token list punctuation">*</span> 列表内容</code></pre><p>效果展示：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h5 id="有序列表："><a href="#有序列表：" class="headerlink" title="有序列表："></a>有序列表：</h5><p>简述：主要用到数+符号.</p><pre class=" language-markdown"><code class="language-markdown">语法：<span class="token list punctuation">1.</span> 列表内容                        （快捷键：Option+Command+U）<span class="token list punctuation">2.</span> 列表内容<span class="token list punctuation">3.</span> 列表内容注明：在1.的.符号后空格，再按ENTER键实现有序1. 2. 3.</code></pre><p>效果展示：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>简述：Markdown使用代码方式生成表格过于麻烦，这里推荐使用快捷键选择行列生成表格</p><pre class=" language-markdown"><code class="language-markdown">快捷键：Option+Command+T鼠标选择：菜单栏-段落-表格-插入表格</code></pre><p>效果展示：</p><table><thead><tr><th>书名</th><th>作者</th></tr></thead><tbody><tr><td>你当像鸟飞往你的山</td><td>塔拉·韦斯特弗</td></tr><tr><td>Java编程思想（第4版）</td><td>Bruce Eckel</td></tr><tr><td>深入理解Java虚拟机</td><td>周志明</td></tr></tbody></table><h2 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h2><h5 id="单行代码："><a href="#单行代码：" class="headerlink" title="单行代码："></a>单行代码：</h5><pre class=" language-markdown"><code class="language-markdown">语法：<span class="token code keyword">`代码内容`</span>     （快捷键：Option+Command+C）</code></pre><p>效果展示：</p><pre class=" language-markdown"><code class="language-markdown">This is a single line code</code></pre><h5 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h5><pre class=" language-markdown"><code class="language-markdown">语法： ​``` markdown                            ​``` java​``` markdown注明：​```后面加上语言名称，可以选择代码块的代码类型（没有空格）</code></pre><p>效果展示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  system<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>相关说明：</p><p>在跟着狂神说Up主学习Java知识时，其中讲述了博客和笔记的重要性，以及Typoca和Markdown结合使用很棒。所以做了笔记。</p><p>相关文章阅读：</p><ul><li><a href="https://www.jianshu.com/p/191d1e21f7ed/">Markdown基本语法</a></li><li><a href="https://www.jianshu.com/p/1e402922ee32">Markdown——入门指南</a></li></ul><p>感谢两位博主的知识分享</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac+IDEA安装和使用maven</title>
      <link href="/2021/12/23/mac-idea-an-zhuang-he-shi-yong-maven/"/>
      <url>/2021/12/23/mac-idea-an-zhuang-he-shi-yong-maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac-IDEA安装和使用maven"><a href="#Mac-IDEA安装和使用maven" class="headerlink" title="Mac+IDEA安装和使用maven"></a>Mac+IDEA安装和使用maven</h1><h3 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h3><ul><li><p>将apache-maven-3.6.3-bin.tar.gz copy到/usr/local目录</p></li><li><p> 进行解压</p></li><li><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tar</span> -xzvf apache-maven-3.6.3-bin.tar.gz</code></pre><p>图解：    <img src="https://img-blog.csdnimg.cn/20210323200415808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhZGlzaHRvbw==,size_16,color_FFFFFF,t_70#pic_center" alt="解压"></p></li><li><p>在~/.bash_profile添加环境变量</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">sudo</span> vim ~/.bash_profile  //添加如下代码  <span class="token function">export</span> MAVEN_HOME<span class="token operator">=</span>/usr/local/apache-maven-3.6.3  <span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$MAVEN_HOME</span>/bin    //执行刷新  <span class="token function">source</span> ~/.bash_profile</code></pre><p>图解：    </p></li></ul><p><img src="https://img-blog.csdnimg.cn/20210323200559492.png#pic_center" alt="环境变量"></p><ul><li>测试 mvn -v</li></ul><p>图解：<br><img src="https://img-blog.csdnimg.cn/20210323200730731.png#pic_center" alt="环境变量"><br><br></p><hr><h3 id="二、配置阿里云镜像："><a href="#二、配置阿里云镜像：" class="headerlink" title="二、配置阿里云镜像："></a>二、配置阿里云镜像：</h3><p>作用：</p><ul><li><strong>使用阿</strong>里云镜像<strong>提高下载jar包的速度</strong></li></ul><p>步骤：</p><ul><li>在 apache-maven-3.6.3的目录下</li></ul><pre class=" language-bash"><code class="language-bash">//1.使用vim打开settings.xml<span class="token function">sudo</span> vim conf/settings.xml//2.在<span class="token operator">&lt;</span>mirrors<span class="token operator">></span><span class="token operator">&lt;</span>/mirrors<span class="token operator">></span>标签中加入如下代码    <span class="token operator">&lt;</span>mirror<span class="token operator">></span>       <span class="token operator">&lt;</span>id<span class="token operator">></span>alimaven<span class="token operator">&lt;</span>/id<span class="token operator">></span>       <span class="token operator">&lt;</span>name<span class="token operator">></span>aliyun maven<span class="token operator">&lt;</span>/name<span class="token operator">></span>       <span class="token operator">&lt;</span>url<span class="token operator">></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token operator">&lt;</span>/url<span class="token operator">></span>       <span class="token operator">&lt;</span>mirrorOf<span class="token operator">></span>central<span class="token operator">&lt;</span>/mirrorOf<span class="token operator">></span>         <span class="token operator">&lt;</span>/mirror<span class="token operator">></span> </code></pre><p>图解：<br><img src="https://img-blog.csdnimg.cn/20210323200952278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhZGlzaHRvbw==,size_16,color_FFFFFF,t_70#pic_center" alt="配置阿里镜像"></p><br><hr><h3 id="三、建立本地仓库"><a href="#三、建立本地仓库" class="headerlink" title="三、建立本地仓库"></a>三、建立本地仓库</h3><p>步骤：</p><ul><li><p>在 apache-maven-3.6.3的目录下</p><pre class=" language-bash"><code class="language-bash">//1.新建maven-repo目录<span class="token function">sudo</span> <span class="token function">mkdir</span> maven-repo//2.使用vim打开settings.xml<span class="token function">sudo</span> vim conf/settings.xmlitemsudo vim conf/settings.xml//3.在<span class="token operator">&lt;</span>localRepository<span class="token operator">></span><span class="token operator">&lt;</span>/localRepository<span class="token operator">></span>中添加本地仓库地址 <span class="token operator">&lt;</span>localRepository<span class="token operator">></span>/usr/local/apache-maven-3.6.3/maven-repo<span class="token operator">&lt;</span>/localRepository<span class="token operator">></span></code></pre></li></ul><p>图解：<br><img src="https://img-blog.csdnimg.cn/20210323201034238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhZGlzaHRvbw==,size_16,color_FFFFFF,t_70#pic_center" alt="修改本地仓库"><br><br></p><hr><h3 id="四、在IDEA中使用Maven"><a href="#四、在IDEA中使用Maven" class="headerlink" title="四、在IDEA中使用Maven"></a>四、在IDEA中使用Maven</h3><ul><li>创建一个maven项目</li></ul><p>图解：<br><img src="https://img-blog.csdnimg.cn/20210323201109294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhZGlzaHRvbw==,size_16,color_FFFFFF,t_70#pic_center" alt="创建maven项目1"></p><ul><li>web项目名称</li></ul><p>图解：<br><img src="https://img-blog.csdnimg.cn/20210323201124711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhZGlzaHRvbw==,size_16,color_FFFFFF,t_70#pic_center" alt="创建maven项目2"></p><ul><li>配置项目的Maven仓库信息</li></ul><p>图解：<br><img src="https://img-blog.csdnimg.cn/20210323201412211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhZGlzaHRvbw==,size_16,color_FFFFFF,t_70#pic_center" alt="创建maven项目3"></p><br><hr><h3 id="五、Maven目录结构和操作"><a href="#五、Maven目录结构和操作" class="headerlink" title="五、Maven目录结构和操作"></a>五、Maven目录结构和操作</h3><p>Maven目录结构：</p><ul><li><strong>Source roots (or source folders)<strong>：通过将文件夹加入这种类别，来告诉IntelliJ IDEA，这个文件夹和它的子文件夹中</strong>包含源码</strong>，在构建工程时，需要作为一部分被编译进去。</li><li><strong>Test source roots (or test source folders; shown as rootTest)<strong>：这个类型的文件夹也用于存放源码，不过是测试的源码（比如单元测试）。te</strong>st source 文件夹可以帮助你将测试代码和产品代码分离</strong>开。</li><li><strong>Resource roots</strong>：该类文件夹用于存放你的应用中需要用到的资源文件（如：<strong>图片、xml或者properties配置文件等</strong>）。</li><li><strong>Test resource roots</strong>：（只有在java模式中可以使用）用于存放测试源码中关联的资源文件。除此之外，和resource文件夹没有区别。</li></ul><p>图解：</p><p><img src="https://img-blog.csdnimg.cn/20210323201442960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhZGlzaHRvbw==,size_16,color_FFFFFF,t_70#pic_center" alt="目录结构"></p><br><hr><h3 id="六、创建Maven项目出现的错误："><a href="#六、创建Maven项目出现的错误：" class="headerlink" title="六、创建Maven项目出现的错误："></a>六、创建Maven项目出现的错误：</h3><p>错误一：</p><ul><li>无法对本地仓库maven-reo文件进行写入</li><li>RROR] Plugin org.apache.maven.plugins:maven-archetype-plugin:RELEASE or one of its dependencies could not be resolved:</li></ul><p>图解：<br><img src="https://img-blog.csdnimg.cn/20210323201502736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhZGlzaHRvbw==,size_16,color_FFFFFF,t_70#pic_center" alt="错误"></p><p>错误原因：</p><ul><li><strong>maven-repo权限低了</strong></li></ul><p>图解：<br><img src="https://img-blog.csdnimg.cn/20210323202419846.png#pic_center" alt="解决"></p><p>解决方法：</p><ul><li><p>修改maven-repo权限为777</p></li><li><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> 777 maven-repo</code></pre></li></ul><p>图解：<br><img src="https://img-blog.csdnimg.cn/20210323201524916.png#pic_center" alt="错误"></p><p>重新运行maven项目，成功解决！</p><p>图解：<br><img src="https://img-blog.csdnimg.cn/20210323201543321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhZGlzaHRvbw==,size_16,color_FFFFFF,t_70#pic_center" alt="解决"></p><p>查看maven仓库中多了什么东西</p><p>图解：<br><img src="https://img-blog.csdnimg.cn/20210323201604434.png#pic_center" alt="图解"></p><br><p>警告二：</p><ul><li>报警：[WARNING] No archetype found in remote catalog. Defaulting to internal catalog</li></ul><p>错误原因：</p><ul><li>因为使用了maven模版构建项目，要从网上获取模版，然而没有找到这个模版或者网络慢，导致获取失败</li></ul><p>解决方法：</p><ul><li><strong>在maven的VM Options加上-DarchetypeCatalog=internal参数，如下</strong></li></ul><p>图解：<br><img src="https://img-blog.csdnimg.cn/202103232016228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhZGlzaHRvbw==,size_16,color_FFFFFF,t_70#pic_center" alt="解决"><br><br></p><hr><h3 id="七、注意："><a href="#七、注意：" class="headerlink" title="七、注意："></a>七、注意：</h3><ul><li>如何IDEA配置Maven，自动完成创建后，IDEA中的MavenHome会使用IEDA默认，我们可以在配置中进行修改为自己想要的Maven仓库</li></ul><p>图解：<img src="https://img-blog.csdnimg.cn/20210323201643676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhZGlzaHRvbw==,size_16,color_FFFFFF,t_70#pic_center" alt="错误"></p><ul><li>未使用webapp模版，需要添加web目录，可以右键项目名，选择Add FrameworksSupport、选择web Versions</li></ul><p>图解：<br><img src="https://img-blog.csdnimg.cn/20210323201708264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhZGlzaHRvbw==,size_16,color_FFFFFF,t_70#pic_center" alt="解决"></p><p><img src="https://img-blog.csdnimg.cn/20210323201725953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhZGlzaHRvbw==,size_16,color_FFFFFF,t_70#pic_center" alt="解决"><br><img src="https://img-blog.csdnimg.cn/20210323201745743.png#pic_center" alt="解决"></p><ul><li>使用模版后，项目结构中没有java、resources、test项目目录</li></ul><p>方法一：右键项目名，创建Directory，选择需要的项目目录</p><p>图解：<br><img src="https://img-blog.csdnimg.cn/20210323201805359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhZGlzaHRvbw==,size_16,color_FFFFFF,t_70#pic_center" alt="解决"></p><p>方法二：直接自己创建项目目录，再手动标记项目。</p><p>图解：<br><img src="https://img-blog.csdnimg.cn/20210323201819270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JhZGlzaHRvbw==,size_16,color_FFFFFF,t_70#pic_center" alt="解决"></p>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(15)Java重写和重载</title>
      <link href="/2021/12/23/javase-15-java-chong-xie-he-chong-zai/"/>
      <url>/2021/12/23/javase-15-java-chong-xie-he-chong-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="Java重写（Override）与重载（Overload）"><a href="#Java重写（Override）与重载（Overload）" class="headerlink" title="Java重写（Override）与重载（Overload）"></a>Java重写（Override）与重载（Overload）</h1><h2 id="重写（Override）"><a href="#重写（Override）" class="headerlink" title="重写（Override）"></a>重写（Override）</h2><h4 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h4><ul><li>重写是子类对父类的<strong>允许访问的方法</strong>的实现过程进行重新编写。</li><li><strong>返回值和形参都不能改变</strong>。</li><li><strong>即外壳不变，核心重写。</strong></li></ul><h4 id="重写的好处："><a href="#重写的好处：" class="headerlink" title="重写的好处："></a>重写的好处：</h4><ul><li>子类可以根据需求，定义特定于自己的行为。</li></ul><h4 id="方法重写的规则："><a href="#方法重写的规则：" class="headerlink" title="方法重写的规则："></a>方法重写的规则：</h4><ul><li>参数列表与被重写的方法的<strong>参数列表必须完全相同。</strong></li><li>返回类型与被重写方法的返回类型可以不同，但是必须是<strong>父类返回值的派生类</strong>。</li><li>访问权限不能比父类中被重写的方法的访问权限低，<strong>权限可以扩大但是不能缩小。</strong><ul><li>public &gt; protected &gt; default &gt; private</li></ul></li><li>声明final的方法不能被重写。</li><li>构造方法不能被重写。</li><li>抛出异常，范围，可以被缩小，但不能被扩大。</li></ul><h4 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h4><ul><li>在面向对象的原则里，重写意味着可以重写任何现有的方法</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">.</span>demo06<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author CodePigPig * @date 2021/2/3 11:16 上午 * @Email 1399203705@qq.com */</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生可以学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Person对象</span>        person<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行Person类的study()方法</span>        student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Person对象</span>        student<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行Person类的study()方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：人可以学习学生可以学习</code></pre><ul><li>上面例子中，person对象属于Person类，student对象属于Student类，两个类中都存在study方法，所以能够正常运行</li><li>创建student对象时，向上转型试下</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">.</span>demo06<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author CodePigPig * @date 2021/2/3 11:16 上午 * @Email 1399203705@qq.com */</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生可以学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">brak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生可以brak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Person对象</span>        person<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行Person类的study()方法</span>        Person student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Person对象</span>        student<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行Person类的study()方法</span>        student<span class="token punctuation">.</span><span class="token function">brak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：java<span class="token operator">:</span> 找不到符号  符号<span class="token operator">:</span> 方法 <span class="token function">brak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  位置<span class="token operator">:</span> 类型为oop<span class="token punctuation">.</span>demo06<span class="token punctuation">.</span>Person的变量 student  </code></pre><ul><li>这里报错，是因为student的引用类型Person类中没有break()方法</li></ul><h2 id="重载（Overload）"><a href="#重载（Overload）" class="headerlink" title="重载（Overload）"></a>重载（Overload）</h2><h4 id="概述：-1"><a href="#概述：-1" class="headerlink" title="概述："></a>概述：</h4><ul><li>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同</li><li>重载就是在一个类中，有相同的函数名称，但形参不同的函数</li></ul><h4 id="方法的重载的规则："><a href="#方法的重载的规则：" class="headerlink" title="方法的重载的规则："></a>方法的重载的规则：</h4><ul><li>被重载的方法必须改变参数列表(参数个数或类型不一样)。</li><li>被重载的方法可以改变返回类型。</li><li>被重载的方法可以改变访问修饰符。</li><li>被重载的方法可以声明新的或更广的检查异常。</li><li>无法以返回值类型作为重载函数的区分标准。</li></ul><h4 id="实现理论："><a href="#实现理论：" class="headerlink" title="实现理论："></a>实现理论：</h4><ul><li>方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</li></ul><h4 id="代码演示：-1"><a href="#代码演示：-1" class="headerlink" title="代码演示："></a>代码演示：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hello hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hello<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hello<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"codepigpig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hello<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"codepigpig"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi,"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",你已经成年了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi,"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",你是未成年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    输出：Hello<span class="token punctuation">,</span>worldHello<span class="token punctuation">,</span>codepigpigHi<span class="token punctuation">,</span>codepigpig<span class="token punctuation">,</span>你已经成年了  </code></pre><h4 id="重写与重载之间的区别："><a href="#重写与重载之间的区别：" class="headerlink" title="重写与重载之间的区别："></a>重写与重载之间的区别：</h4><table><thead><tr><th align="center">区别点</th><th align="left">重载方法</th><th align="left">重写方法</th></tr></thead><tbody><tr><td align="center">参数列表</td><td align="left">必须修改</td><td align="left">一定不能修改</td></tr><tr><td align="center">返回类型</td><td align="left">可以修改</td><td align="left">一定不能修改</td></tr><tr><td align="center">异常</td><td align="left">可以修改</td><td align="left">可以减少或删除，一定不能抛出新的或者更广的异常</td></tr><tr><td align="center">访问</td><td align="left">可以修改</td><td align="left">一定不能做更严格的限制（可以降低限制）</td></tr></tbody></table><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ul><li>方法的重写和重载都是java多态性的不同表现。</li><li>方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。</li><li>方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。</li><li>方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重写 </tag>
            
            <tag> 重载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(14)-继承</title>
      <link href="/2021/12/23/javase-14-ji-cheng/"/>
      <url>/2021/12/23/javase-14-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><ul><li>继承就是子类继承父类，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。        </li></ul><h4 id="生活中的继承："><a href="#生活中的继承：" class="headerlink" title="生活中的继承："></a>生活中的继承：</h4><p><img src="https://gitee.com/codePigPig/blogImages/raw/master/uPic/20210203120237299.png" alt="继承"></p><p>图解：</p><ul><li>奶牛和驴属于食草动物类，狮子和老虎属于食肉动物类。</li><li>食草动物类和食肉动物类又属于动物类。</li><li>所以继承需要符合的关系是：is-a，<strong>父类更通用，子类更具体。</strong></li></ul><h4 id="继承类型："><a href="#继承类型：" class="headerlink" title="继承类型："></a>继承类型：</h4><ul><li>单继承</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    ······<span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    ······<span class="token punctuation">}</span></code></pre><ul><li>多重继承</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    ······<span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    ······<span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    ······<span class="token punctuation">}</span></code></pre><ul><li>不同类继承同一个类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    ······<span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    ······<span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    ······<span class="token punctuation">}</span></code></pre><ul><li><strong>Java不支持多继承</strong></li></ul><h4 id="继承的特性："><a href="#继承的特性：" class="headerlink" title="继承的特性："></a>继承的特性：</h4><ul><li>子类拥有父类非private的属性和方法。</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方法实现父类的方法。</li><li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</li></ul><h4 id="不继承："><a href="#不继承：" class="headerlink" title="不继承："></a>不继承：</h4><p>非继承代码演示：</p><ul><li>Tiger类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">.</span>demo04<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author CodePigPig * @date 2021/2/2 8:23 下午 * @Email 1399203705@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tiger</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Tiger</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在吃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selfIntroduction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大家好！我是"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",我今年"</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"岁了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>MilkCow类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">.</span>demo04<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author CodePigPig * @date 2021/2/2 8:23 下午 * @Email 1399203705@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MilkCow</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//年龄</span>    <span class="token keyword">public</span> <span class="token function">MilkCow</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在吃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selfIntroduction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大家好！我是"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",我今年"</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"岁了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>说明：</p><ul><li>从Tiger类和MilkCow类可以看出，同样的属性和同样的方法，代码存在重复了，导致后果就是代码量大且臃肿。</li><li>维护性不高，如果需要修改同样的属性和方法，需要更改多处代码，容易出错。</li></ul><h4 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h4><ul><li>通过将同样的属性和方法进行提取出来，设置为公共类，让子类Tiger类和MilkCow类继承父类Animal类</li><li>减少了重复代码，代码更加简洁，提高代码的复用性。</li></ul><p>继承的代码演示：</p><ul><li>Animal类（公共类）</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">.</span>demo04<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author CodePigPig * @date 2021/2/2 8:22 下午 * @Email 1399203705@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//年龄</span>    <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在吃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selfIntroduction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大家好！我是"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",我今年"</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"岁了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Tiger类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tiger</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Tiger</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>MilkCow类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MilkCow</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MilkCow</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Application类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">.</span>demo04<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author CodePigPig * @date 2021/2/2 8:39 下午 * @Email 1399203705@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MilkCow milkCow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MilkCow</span><span class="token punctuation">(</span><span class="token string">"奶小牛"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        milkCow<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        milkCow<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        milkCow<span class="token punctuation">.</span><span class="token function">selfIntroduction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============分割线============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Tiger tiger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token string">"虎大王"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tiger<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tiger<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tiger<span class="token punctuation">.</span><span class="token function">selfIntroduction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：奶小牛正在吃奶小牛正在睡觉大家好！我是奶小牛<span class="token punctuation">,</span>我今年<span class="token number">22</span>岁了<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>分割线<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>虎大王正在吃虎大王正在吃大家好！我是虎大王<span class="token punctuation">,</span>我今年<span class="token number">3</span>岁了  </code></pre><h4 id="继承中的关键字"><a href="#继承中的关键字" class="headerlink" title="继承中的关键字"></a>继承中的关键字</h4><p>概述：</p><ul><li>继承可以使用extends和implements这两个关键字来实现继承。</li><li>所有类都继承于java.lang.Object，当一个类没有继承其他类时，默认继承object类（祖先类）。</li></ul><p>关键字：</p><ul><li>extend关键字</li><li>类的继承时单一继承，一个子类只能拥有一个父类，所以extends只能继承一个类。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>       <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token function">Animal</span><span class="token punctuation">(</span>String myName<span class="token punctuation">,</span> String myid<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//初始化属性值</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//吃东西方法的具体实现  } </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//睡觉方法的具体实现  } </span><span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Penguin</span>  <span class="token keyword">extends</span>  <span class="token class-name">Animal</span><span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><ul><li>implements关键字</li><li>使用implements关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同事继承多个接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span>B <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>this关键字：指向自己的引用</li><li>super关键字：我们可以用过super关键字来实现对父类成员的访问，用来引用当前对象的父类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">.</span>demo05<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author CodePigPig * @date 2021/2/2 9:07 下午 * @Email 1399203705@qq.com */</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"animal ： eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cat : eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eatTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========分割线========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">eatTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> oop<span class="token punctuation">.</span>demo05<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author CodePigPig * @date 2021/2/2 9:07 下午 * @Email 1399203705@qq.com */</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"animal ： eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cat : eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eatTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========分割线========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">eatTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：animal ： eatcat <span class="token operator">:</span> eat<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>分割线<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>cat <span class="token operator">:</span> eatanimal ： eat</code></pre><ul><li>final关键字</li><li>final关键字声明类可以把类定义为不能被继承，即最终类；或者用于修饰方法，该方法不能被子类重写。</li></ul><pre class=" language-java"><code class="language-java">声明类：<span class="token keyword">final</span> <span class="token keyword">class</span> 类名<span class="token punctuation">{</span>    ·····<span class="token punctuation">}</span>声明方法：修饰符<span class="token punctuation">(</span><span class="token keyword">public</span><span class="token operator">/</span><span class="token keyword">private</span><span class="token operator">/</span><span class="token keyword">default</span><span class="token operator">/</span><span class="token keyword">protected</span><span class="token punctuation">)</span> <span class="token keyword">final</span> 返回值类型 方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ······<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(13)-封装</title>
      <link href="/2021/12/23/javase-13-feng-zhuang/"/>
      <url>/2021/12/23/javase-13-feng-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><ul><li><p>指一种将抽象性函式接口的实现细节部分包装、隐藏起来的方法。</p></li><li><p>封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。</p></li><li><p>封装最主要的功能在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序片段。</p></li></ul><h4 id="封装的优点："><a href="#封装的优点：" class="headerlink" title="封装的优点："></a>封装的优点：</h4><ul><li>良好的封装能够减少耦合。</li><li>类内部的结构可以自由修改。</li><li>可以对成员变量进行更精确的控制。</li><li>隐藏信息，实现细节。</li></ul><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><ul><li>修改属性的可见性来限制对属性的访问（一般限制为private）。</li><li>对每个值属性提供对外的公共方法访问。</li></ul><p>代码演示：</p><ul><li>Student类</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">.</span>demo03<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author CodePigPig * @date 2021/2/2 5:33 下午 * @Email 1399203705@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//private 属性私有，成员变量只能在Student类可见可用</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//学号</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//性别</span>    <span class="token comment" spellcheck="true">//提供一些public的get、set方法</span>    <span class="token comment" spellcheck="true">//因此，任何要访问类中私有成员变量的类都要通过这些getter和setter方法。</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Student{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Application类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">.</span>demo03<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author CodePigPig * @date 2021/2/2 5:36 下午 * @Email 1399203705@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化Student类，创建student对象</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过set方法给私有的成员属性赋值</span>        student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：Student<span class="token punctuation">{</span>name<span class="token operator">=</span><span class="token string">'小王'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">,</span> sex<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">}</span>  </code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(12)-方法</title>
      <link href="/2021/12/23/javase-12-fang-fa/"/>
      <url>/2021/12/23/javase-12-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h4 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h4><p>概述：</p><ul><li>方法是语句的集合，它们在一起执行一个功能</li><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或者对象中</li><li>方法在程序中被创建，在其他地方被引用</li></ul><p>设计方法的原则：</p><ul><li>方法的本意是功能模块，就实现某个功能的语句块的集合</li><li>我们设计方法的时候，最好保持方法的原子性，就是一个方法只完成一个功能，利于后期的扩展</li></ul><p>语法：</p><pre class=" language-java"><code class="language-java">修饰符    返回值类型    方法名<span class="token punctuation">(</span>参数类型 参数名<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    方法体    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>修饰符：定义了该方法的<strong>访问类型</strong></li><li>返回值类型：<ul><li>有返回值：returnValueType是<strong>方法返回值的数据类型</strong></li><li>没返回值：returnValueType的默认关键字是<strong>void</strong></li></ul></li><li>方法名：方法的<strong>实际名称</strong>。方法名和参数表共同构成方法签名</li><li>参数类型：参数像一个占位符，当一个方法被调用时，传递值给参数。这个值被称为实参数或者变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法也可以包含参数。<ul><li>形式参数：在方法被调用时候用于接收外界输入的数据</li><li>实参：调用方法时实际给方法的数据</li></ul></li><li>方法体：方法体包含具体的语句，定义该方法的功能</li></ul><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li></ul><h4 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h4><ul><li><p>值传递：实参传递给形参的是值  形参和实参在内存上是两个独立的变量 对形参做任何修改不会影响实参</p></li><li><p>引用传递：实参传递给形参的是参数对于堆内存上的引用地址实参和形参在内存上指向了同一块区域对形参的修改会影响实参</p></li></ul><h4 id="静态方法和实例方法的区别"><a href="#静态方法和实例方法的区别" class="headerlink" title="静态方法和实例方法的区别"></a>静态方法和实例方法的区别</h4><p>静态方法：</p><ul><li>属于整个类所有，因此调用它不需要实例化</li><li>静态方法只能访问静态成员，不能访问实例成员</li><li>在程序运行期间，静态方法是一直存放在内存中，因此调用速度快，但是却占用内存</li></ul><p>实例方法：</p><ul><li><p>实例方法必须先实例化，创建一个对象，才能进行调用（对象.实例方法（））</p></li><li><p>实例方法可以访问静态成员和实例成员</p></li><li><p>实例方法是使用完成后由回收机制自动进行回收，下次再使用必须再实例化</p></li></ul><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>概述：</p><ul><li>类构造对象时调用的方法，主要用来实例化对象。构造方法分为<strong>无参构造方法</strong>、<strong>有参构造方法</strong></li><li>类中默认有无参构造</li></ul><p>作用：</p><ul><li>一般用来初始化成员属性和成员方法的，即new对象产生后，就调用了对象了属性和方法</li></ul><p>注意：</p><ul><li>构造方法<strong>不能被static、final、synchronized、abstract和native修饰。</strong></li><li>构造方法可以重载，方法名相同，但参数不同的多个方法，调用时会自动根据不同的参数选择相应的方法</li><li>构造方法是<strong>不被继承的</strong></li></ul><p>代码演示：</p><ul><li>无参数构造和有参数构造</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//默认无参数构造</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//有参数构造</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><p>概述：</p><ul><li>this 关键字用来表示当前对象本身，或当前类的一个实例，通过 this 可以调用本对象的所有方法和属性</li><li>this <strong>只有在类实例化后才有意义</strong></li></ul><p>作用：</p><ul><li>当成员变量与局部变量同名时，用来<strong>区分成员变量和局部变量</strong></li><li>在一个构造函数中可以调用另外一个构造函数初始化对象</li></ul><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"狗"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//成员变量</span>    String color<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String name <span class="token operator">=</span> <span class="token string">"猫"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//局部变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我养了一只："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：我养了一只：狗 </code></pre><h4 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h4><ul><li>调用方法：对象名.方法名(实参列表)</li></ul><p>Java支持两种调用方法的方式，根据方式否返回值来选择</p><ul><li>当方法返回要一个值的时候，方法调用通常被当作一个值</li></ul><ul><li>当方法返回值时void，方法调用一定是一条语句</li></ul><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//比大小</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num1<span class="token operator">==</span>num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num1==num2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num1<span class="token operator">></span>num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        result <span class="token operator">=</span> num1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>输出：<span class="token number">40</span>  </code></pre><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><p>简述：</p><ul><li>在一个类中，我们可以定义多个方法。如果有一系列方法，它们的功能都是类似的，只有参数有所不同，那么，可以把这一组方法名做成<em>同名</em>方法</li><li>重载就是在一个类中，有相同的函数名称，但形参不同的函数</li></ul><p>方法的重载的规则：</p><ul><li>方法名称必须相同</li><li>参数列表必须不同（个数不同、或类型不同、参数列表排序不同等）</li><li>方法的返回类型可以相同也可以不同</li><li>仅仅返回类型不同不足以成为方法的重载</li></ul><p>实现理论：</p><ul><li>方法名称相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错</li></ul><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Hello hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hello<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hello<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"codepigpig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hello<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">"codepigpig"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi,"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",你已经成年了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi,"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",你是未成年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    输出：Hello<span class="token punctuation">,</span>worldHello<span class="token punctuation">,</span>codepigpigHi<span class="token punctuation">,</span>codepigpig<span class="token punctuation">,</span>你已经成年了  </code></pre><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>简述：</p><ul><li>从JDK1.5开始，Java支持传递同类型的可变参数给了一个方法</li><li>本质是一个<strong>数组</strong></li></ul><p>用法：</p><ul><li>在方法声明中，在指定参数类型后加一个省略号(…)</li><li>一个方法中只能制定一个可变参数，他必须是方法的最后一个参数。任何普通参数必须在它之前声明</li></ul><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printMax</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printMax</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> numbres<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numbres<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No argument passed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> result <span class="token operator">=</span> numbres<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找最大值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbres<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>numbres<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>                result <span class="token operator">=</span> numbres<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The max value is "</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：The max value is <span class="token number">46.0</span>  </code></pre><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>简述：</p><ul><li>递归就是A方法调用A方法，自己调用自己</li></ul><p>用处：</p><ul><li>利用递归可以用简单的程序来解决一些复杂的问题。它通常吧一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解。</li><li>递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大减少了程序的代码量</li><li>递归的能力在于用有限的语句来定义对象的无限集合</li></ul><p>递归的结构：</p><ul><li>递归头：什么时候不调用自身方法。如果没有头，将陷入死循环</li><li>递归体：什么时候需要调用自身方法</li></ul><p>注意：</p><ul><li>能不能用递归就不能递归，重要递归的思想</li><li>基数小的时候可以用递归，基数大其他算法代替</li></ul><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> n<span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：<span class="token number">120</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(11)-Java面向对象概述</title>
      <link href="/2021/12/23/javase-11-java-mian-xiang-dui-xiang-gai-shu/"/>
      <url>/2021/12/23/javase-11-java-mian-xiang-dui-xiang-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h2><p>概述：</p><ul><li>面线对象简称OO （Object Oriented），20 世纪 80 年代以后，有了面向对象分析（OOA）、 面向对象设计（OOD）、面向对象程序设计（OOP）等新的系统开发方式模型的研究。</li><li>对 <a href="http://c.biancheng.net/java/">Java</a> 语言来说，一切皆是对象。把现实世界中的对象抽象地体现在编程世界中，一个对象代表了某个具体的操作。一个个对象最终组成了完整的程序设计，这些对象可以是独立存在的，也可以是从别的对象继承过来的。对象之间通过相互作用传递信息，实现程序开发。</li></ul><h4 id="面向对象思想："><a href="#面向对象思想：" class="headerlink" title="面向对象思想："></a>面向对象思想：</h4><ul><li>所谓对象就是真实世界中的实体，对象与实体是一一对应的，也就是说现实世界中每一个实体都是一个对象，它是一种具体的概念</li><li>物以类聚，分类的思想模式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独的思考。最后才对某个分类下的细节进行面向过程的思索</li></ul><h4 id="面向对象的三大核心特性："><a href="#面向对象的三大核心特性：" class="headerlink" title="面向对象的三大核心特性："></a>面向对象的三大核心特性：</h4><ul><li>可重复性：代码重复使用，减少代码量，提高开发效率（继承性、封装性、多态性）</li><li>可扩展性；指新功能能够容易的加入到系统中，便于针对系统的修改</li><li>可管理性：能够将功能与数据结合，方便管理</li></ul><h4 id="优点和缺点："><a href="#优点和缺点：" class="headerlink" title="优点和缺点："></a>优点和缺点：</h4><p>优点：</p><ul><li>易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特 性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护</li></ul><p>缺点：</p><ul><li>性能比面向过程低</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(10)-数组的创建和使用</title>
      <link href="/2021/12/23/javase-10-shu-zu-de-chuang-jian-he-shi-yong/"/>
      <url>/2021/12/23/javase-10-shu-zu-de-chuang-jian-he-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h4 id="数组的概述："><a href="#数组的概述：" class="headerlink" title="数组的概述："></a>数组的概述：</h4><ul><li>数组是相同类型数据的有序集合</li><li>数组描述的是相同类型的若干个数组，按照一定的先后次序排列组合而成</li><li>其中，每一个数据称做一个数组元素，每个数组元素可以通过一个下标来访问它们</li></ul><h4 id="java数组的特点："><a href="#java数组的特点：" class="headerlink" title="java数组的特点："></a>java数组的特点：</h4><ul><li>数组所有元素初始化为默认值，整型都是<code>0</code>，浮点型是<code>0.0</code>，布尔型是<code>false</code></li><li>数组一旦创建后，<strong>大小就不可改变</strong></li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是数组中<strong>必须是相同类型</strong>，不允许出现混合类型</li><li><strong>数组变量属于引用类型，数组也可以看成是对象</strong>，数组中的每个元素相当于该对象的成员变量</li><li>Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong></li></ul><h4 id="数组的声明和创建"><a href="#数组的声明和创建" class="headerlink" title="数组的声明和创建"></a>数组的声明和创建</h4><ul><li>Java语言使用new操作符来创建数组，语法如下：</li></ul><pre class=" language-java"><code class="language-java">dataType<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayRefVar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">dataType</span><span class="token punctuation">[</span>arraySize<span class="token punctuation">]</span></code></pre><ul><li>数组的元素是通过索引访问的，数组索引从0开始</li><li>获取数组长度：<ul><li>arrays.length</li></ul></li></ul><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义一个数组变量nums，</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组对应下标设置赋值</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用for循环输出数组中的值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出：<span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span></code></pre><ul><li>数组创建简写方式</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出：<span class="token number">10</span><span class="token number">20</span><span class="token number">30</span><span class="token number">40</span><span class="token number">50</span></code></pre><h4 id="数组的边界"><a href="#数组的边界" class="headerlink" title="数组的边界"></a>数组的边界</h4><ul><li>下标的合法区间：[0,length-1]，如果越界就会报错</li><li>ArrayIndexOutOfBoundsException: 数组下标越界异常</li></ul><p>小结：</p><ul><li>数组是相同数据类型（可以为任意类型）的有序集合</li><li>数组也是对象。数组元素相当于对象的成员变量</li><li>数组长度是确定的，不可变的</li></ul><h2 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h2><p>遍历数组：</p><ul><li>查处最大值</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//查找出最大值</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>        max <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值为："</span><span class="token operator">+</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>输出：<span class="token number">30</span> </code></pre><p>For-each循环遍历：</p><ul><li>循环输出</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出：<span class="token number">10</span><span class="token number">20</span><span class="token number">30</span><span class="token number">40</span><span class="token number">50</span></code></pre><p>数组作为方法入参和数组作返回值：</p><ul><li>打印和反转数组</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//数组作为参数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> array <span class="token operator">:</span> arrays<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//数组作为返回值</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> reverse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arrays<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> reverse<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            reverse<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> reverse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义数组nums</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//反转数组nums</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> reverse <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打印数组reverse</span>        <span class="token function">printArray</span><span class="token punctuation">(</span>reverse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：<span class="token number">6</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span> </code></pre><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>概述：</p><ul><li>多数数组可以看成时候数组的数组，比如一个二维数组就是一个特殊的一位数组，其每一个元素都是一个一位数组</li></ul><p>多维数组的创建：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> n <span class="token operator">:</span> ns<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：<span class="token number">1</span><span class="token number">2</span><span class="token number">2</span><span class="token number">3</span><span class="token number">3</span><span class="token number">4</span>  </code></pre><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>概述：</p><ul><li>冒泡排序无疑是最为出名的排序算法之一</li><li>冒泡的代码是两层循环，外层冒泡轮数，里层依次比较，时间复杂度O(n2)</li></ul><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//冒泡排序</span>    <span class="token comment" spellcheck="true">/*        1. 比较数组中，两个相邻的元素，如果第一个数比第二个大，我们就交换它们的位置        2. 每一次比较，都会产生出一个最大，或者最小的数字        3. 下一轮则可以少一次排序        4. 依次循环，直到结束     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sort <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>  </code></pre><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p>概述：</p><ul><li>当一个数组中大部分元素为0，或者为同一值的数组时，可以用稀疏数组来保存该数组</li></ul><p>稀疏数组处理方式：</p><ul><li>记录数组一共有几行几列，有多少个不同与0的值</li><li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> array<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author CodePigPig * @date 2021/2/1 10:41 上午 * @Email 1399203705@qq.com */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//稀疏数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        array1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========原生数组==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">:</span> array1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> anInt <span class="token operator">:</span> ints<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>anInt<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//遍历数组，查询出一共有多数个非0数据</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//创建并设置稀疏数组的首行数据</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> array1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历二维数组，将非零的值，存放在稀疏数组中</span>        <span class="token keyword">int</span> count2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    array2<span class="token punctuation">[</span>count2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    array2<span class="token punctuation">[</span>count2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    array2<span class="token punctuation">[</span>count2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    count2<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========稀疏数组============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">:</span> array2<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> anInt <span class="token operator">:</span> ints<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>anInt<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========还原数组============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取稀疏数组的首行，获取到行列</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历稀疏数组，还原值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            array3<span class="token punctuation">[</span>array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">:</span> array3<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> anInt <span class="token operator">:</span> ints<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>anInt<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                                        <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>原生数组<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>稀疏数组<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token number">11</span> <span class="token number">11</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>还原数组<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(09)-流程控制</title>
      <link href="/2021/12/23/javase-09-liu-cheng-kong-zhi/"/>
      <url>/2021/12/23/javase-09-liu-cheng-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h1><h2 id="if选择结构"><a href="#if选择结构" class="headerlink" title="if选择结构"></a>if选择结构</h2><h4 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h4><ul><li>我们很多时候需要取判断一个东西是否可行，然后我们才要去执行，这样一个过程在程序中用if语句来表示</li></ul><h4 id="基本结构："><a href="#基本结构：" class="headerlink" title="基本结构："></a>基本结构：</h4><p>if单选择结构</p><ul><li>语法：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果布尔表达式为true将执行的语句</span><span class="token punctuation">}</span></code></pre><ul><li>流程图：<br><img src="https://gitee.com/codePigPig/blogImages/raw/master/uPic/88E96F3D-1FB1-4012-B955-422E06ED15AE.png" alt="if单选择结构"></li></ul><p>if双选择结构</p><ul><li>语法：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//语句1</span>    <span class="token comment" spellcheck="true">//如果布尔表达式为true将执行的语句</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//语句2</span>  <span class="token comment" spellcheck="true">//如果布尔表达式为false将执行的语句</span><span class="token punctuation">}</span></code></pre><ul><li>流程图：<br><img src="https://gitee.com/codePigPig/blogImages/raw/master/uPic/2021012911562968.png" alt="if双选择结构"></li></ul><p>if多选择结构</p><ul><li>语法：</li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果布尔表达式为true将执行的语句</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如果布尔表达式为true将执行的语句</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如果布尔表达式为true将执行的语句</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如果以上布尔表达式都不为true执行代码</span><span class="token punctuation">}</span></code></pre><ul><li>流程图：</li></ul><p><img src="https://gitee.com/codePigPig/blogImages/raw/master/uPic/20210129120030411.png" alt="if多选择结构"></p><p>嵌套的if结构</p><ul><li>语法</li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果布尔表达式为true将执行的语句</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果布尔表达式为true将执行的语句</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="switch多选择结构"><a href="#switch多选择结构" class="headerlink" title="switch多选择结构"></a>switch多选择结构</h2><h5 id="简述：-1"><a href="#简述：-1" class="headerlink" title="简述："></a>简述：</h5><ul><li>switch case语句判断一个变量与一系列值中某一个值是否相等，每一个值称为一分支</li></ul><h5 id="switch语句中的变量类型可以是："><a href="#switch语句中的变量类型可以是：" class="headerlink" title="switch语句中的变量类型可以是："></a>switch语句中的变量类型可以是：</h5><ul><li>byte、short、int、char</li><li>支持String类型（从JavaSE 7开始）</li><li>同时case标签必须为字符串常量或字面量 </li></ul><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">case</span> value<span class="token operator">:</span>    <span class="token comment" spellcheck="true">//语句</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可选  跳出当前语句块</span>     <span class="token keyword">case</span> value<span class="token operator">:</span>    <span class="token comment" spellcheck="true">//语句</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可选</span>    <span class="token comment" spellcheck="true">//可以有任意数量的case语句</span>      <span class="token keyword">default</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>可选    <span class="token comment" spellcheck="true">//语句</span><span class="token punctuation">}</span></code></pre><p>代码演示：</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//case 穿透</span>        <span class="token comment" spellcheck="true">//switch 匹配一个具体的值</span>        <span class="token keyword">char</span> grade <span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成绩为优秀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'B'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成绩为良好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'C'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成绩为一般"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"低空飞过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'E'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"挂科炸裂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成绩无效"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>输出<span class="token operator">:</span>成绩为一般</code></pre><p>注意：</p><ul><li>case后面要加break，否则会发生穿透事件（开始没有设置break的语句都将执行）</li></ul><h1 id="循环结构："><a href="#循环结构：" class="headerlink" title="循环结构："></a>循环结构：</h1><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>简述：</p><ul><li>循环在每次循环开始前，首先判断条件是否成立。如果计算结果为<code>true</code>，就把循环体内的语句执行一遍，如果计算结果为<code>false</code>，那就直接跳到<code>while</code>循环的末尾，继续往下执行。</li></ul><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//循环内容</span><span class="token punctuation">}</span></code></pre><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//计算1-100的总和</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//累加的和,初始化为0</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//循环条件是n&lt;=100</span>    sum<span class="token operator">+=</span>count<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//将count加入到sum中</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//count自增+1</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>输出：<span class="token number">5050</span>  </code></pre><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h2><p>简述：</p><ul><li>总是保证循环体会被至少执行一次</li></ul><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//代码语句</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span></code></pre><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//计算1-100的总和</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//累加的和,初始化为0</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    sum<span class="token operator">+=</span>count<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//将count加入到sum中</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//count自增+1</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环条件是n&lt;=100</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>输出：<span class="token number">5050</span></code></pre><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>简述：</p><ul><li>for循环语句是支持迭代的一种通用结构，是最有效，最灵活的循环结构</li></ul><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始条件<span class="token punctuation">;</span> 循环检测条件<span class="token punctuation">;</span> 循环后更新计数器<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 执行语句</span><span class="token punctuation">}</span></code></pre><p>注意说明：</p><ul><li>在<code>for</code>循环执行前，会先执行初始化语句<code>int i=1</code>，它定义了计数器变量<code>i</code>并赋初始值为<code>1</code>，然后，循环前先检查循环条件<code>i&lt;=100</code>，循环后自动执行<code>i++</code>，因此，和<code>while</code>循环相比，<code>for</code>循环把更新计数器的代码统一放到了一起。在<code>for</code>循环的循环体内部，不需要去更新变量<code>i</code>。）</li></ul><p>代码演示：</p><ul><li>计算0到100之间的奇数和偶数和</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//计算0到100之间的奇数和偶数和</span><span class="token keyword">int</span> evenSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> oddSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        evenSum<span class="token operator">+=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        oddSum<span class="token operator">+=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"偶数和："</span><span class="token operator">+</span>evenSum<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奇数和："</span><span class="token operator">+</span>oddSum<span class="token punctuation">)</span><span class="token punctuation">;</span>输出：偶数和：<span class="token number">2550</span>奇数和：<span class="token number">2500</span></code></pre><ul><li>用for循环输出1-1000之间能被5整除的数，并且每行输出3个</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//用for循环输出1-1000之间能被5整除的数，并且每行输出3个</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：<span class="token number">5</span> <span class="token number">10</span> <span class="token number">15</span> <span class="token number">20</span> <span class="token number">25</span> <span class="token number">30</span> <span class="token number">35</span> <span class="token number">40</span> <span class="token number">45</span> <span class="token number">50</span> <span class="token number">55</span> <span class="token number">60</span> <span class="token number">65</span> <span class="token number">70</span> <span class="token number">75</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><ul><li>打印九九乘法表</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//打印九九乘法表</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出：<span class="token number">1</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>    <span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">2</span>    <span class="token number">2</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">4</span>    <span class="token number">1</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">=</span><span class="token number">3</span>    <span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">=</span><span class="token number">6</span>    <span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">=</span><span class="token number">9</span>    <span class="token number">1</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">=</span><span class="token number">4</span>    <span class="token number">2</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">=</span><span class="token number">8</span>    <span class="token number">3</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">=</span><span class="token number">12</span>    <span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">=</span><span class="token number">16</span>    <span class="token number">1</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">5</span>    <span class="token number">2</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">10</span>    <span class="token number">3</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">15</span>    <span class="token number">4</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">20</span>    <span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">25</span>    <span class="token number">1</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">=</span><span class="token number">6</span>    <span class="token number">2</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">=</span><span class="token number">12</span>    <span class="token number">3</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">=</span><span class="token number">18</span>    <span class="token number">4</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">=</span><span class="token number">24</span>    <span class="token number">5</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">=</span><span class="token number">30</span>    <span class="token number">6</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">=</span><span class="token number">36</span>    <span class="token number">1</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">7</span>    <span class="token number">2</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">14</span>    <span class="token number">3</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">21</span>    <span class="token number">4</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">28</span>    <span class="token number">5</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">35</span>    <span class="token number">6</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">42</span>    <span class="token number">7</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">49</span>    <span class="token number">1</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">8</span>    <span class="token number">2</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">16</span>    <span class="token number">3</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">24</span>    <span class="token number">4</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">32</span>    <span class="token number">5</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">40</span>    <span class="token number">6</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">48</span>    <span class="token number">7</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">56</span>    <span class="token number">8</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">64</span>    <span class="token number">1</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">9</span>    <span class="token number">2</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">18</span>    <span class="token number">3</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">27</span>    <span class="token number">4</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">36</span>    <span class="token number">5</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">45</span>    <span class="token number">6</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">54</span>    <span class="token number">7</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">63</span>    <span class="token number">8</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">72</span>    <span class="token number">9</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">81</span>    </code></pre><ul><li>打印三角形</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//打印三角形</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i <span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出：     <span class="token operator">*</span>    <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>   <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>  <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>  </code></pre><h2 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h2><p>简述：主要用于数组或集合的增强型for循环</p><p>语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>声明语句<span class="token operator">:</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//语句块</span><span class="token punctuation">}</span></code></pre><ul><li>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配，其作用域在循环语句块，其值在此时数组元素的值相等</li><li>表达式：表达式是要访问的数组名，或者是返回值为数组的方法</li></ul><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> number <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出：<span class="token number">0</span><span class="token number">20</span><span class="token number">30</span><span class="token number">40</span><span class="token number">50</span>  </code></pre><p>break和coutinue</p><p>简述：</p><ul><li>break：<ul><li>break在任何循环语句的主题部分，均可用break控制循环的流程</li><li>break用于强制退出循环，不执行循环中剩下的语句</li></ul></li><li>continue：<ul><li>用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流程控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(08)-Java包机制+Doc生成文档</title>
      <link href="/2021/12/23/javase-08-java-bao-ji-zhi-doc-sheng-cheng-wen-dang/"/>
      <url>/2021/12/23/javase-08-java-bao-ji-zhi-doc-sheng-cheng-wen-dang/</url>
      
        <content type="html"><![CDATA[<h1 id="Java包机制-Doc生成文档"><a href="#Java包机制-Doc生成文档" class="headerlink" title="Java包机制+Doc生成文档"></a>Java包机制+Doc生成文档</h1><h4 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h4><p>简述：</p><ul><li>为了更好地组织类，Java提供了包机制，用于区别类名的命名空间</li></ul><p>语法格式：</p><ul><li>​    package pkg1[.pkg2[.pkg3…]];</li><li>一般利用公司域名倒置作为报名：<a href="http://www.mywzb.com/">www.mywzb.com</a>  导致  com.mywzb.www</li></ul><p>导入工具包</p><p>简述：</p><ul><li>为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包，使用”import”语句可以完成此功能</li></ul><p>语法格式：</p><ul><li>import package1[.package2…].(classname|*);</li></ul><h4 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h4><p>简述：</p><ul><li>JavaDoc命令是用来生成自己API文档的</li></ul><p>主要参数：</p><ul><li>s@author    作者名</li><li>@version   版本号  </li><li>@since       指明需要最早使用的jdk版本</li><li>@param    参数名</li><li>@return    返回值情况</li><li>@throws   异常抛出情况</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java包机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(07)-Java运算符和优先级</title>
      <link href="/2021/12/23/javase-07-java-yun-suan-fu-he-you-xian-ji/"/>
      <url>/2021/12/23/javase-07-java-yun-suan-fu-he-you-xian-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Java运算符"><a href="#Java运算符" class="headerlink" title="Java运算符"></a>Java运算符</h1><h4 id="Java语言支持如下运算符："><a href="#Java语言支持如下运算符：" class="headerlink" title="Java语言支持如下运算符："></a>Java语言支持如下运算符：</h4><ul><li><p>算术运算符：+、-、*、/、%（取余）、++、- -</p></li><li><p>赋值运算符：=</p></li><li><p>关系运算符：&gt;、&lt;、&lt;=、&gt;=、==、!=instanceof</p></li><li><p>逻辑运算符：&amp;&amp;（与）、||（或）、!（非）</p></li><li><p>位运算符：&amp;、｜、^、～、&gt;&gt;、&gt;&gt;&gt;</p></li><li><p>条件运算符：? : 三元运算</p></li><li><p>扩展赋值运算符：+=、-=、*=、/=</p></li></ul><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><ul><li><p>自动类型提升：</p><ul><li>当容量小的数据类型的变量与容量大的数据类型做运算时，结果自动提升为容量大的类型。</li><li>byte、char、short—&gt;int—-&gt;long—&gt;float—-&gt;double        </li><li><strong>当byte、char、short三种类型用运算符运算后自动转型为int类型</strong></li></ul></li><li><p>强制类型转换</p><ul><li>需要使用强转符（），括号中加入想转换的类型</li></ul></li></ul><h4 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h4><ul><li>简单二元运算：</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//二元运算</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//都是int类型相除后会有小数点，需要强制转换类型</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取余</span>输出：<span class="token number">30</span><span class="token operator">-</span><span class="token number">10</span><span class="token number">200</span><span class="token number">0.5</span><span class="token number">0</span></code></pre><ul><li>关系运算：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>输出：<span class="token boolean">false</span><span class="token boolean">true</span><span class="token boolean">false</span><span class="token boolean">true</span></code></pre><ul><li><p>自增自减（一元运算符）</p><ul><li>a++、a–：先进行表达式运算，再进行自增或者自减运算，</li><li>++a、–a：先进行自增或者自减运算，再进行表达式运算</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行完这段代码后，先给b赋值b=a(3),再将a自增</span><span class="token comment" spellcheck="true">//a = a+1;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a++自增后的a为："</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b为："</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行这段代码后，先将a自增，再把给c赋值c=a(5)</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"++a自增后的a为："</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c为："</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>输出：a<span class="token operator">++</span>自增后的a为：<span class="token number">4</span>b为：<span class="token number">3</span><span class="token operator">++</span>a自增后的a为：<span class="token number">5</span>c为：<span class="token number">5</span></code></pre></li><li><p>逻辑运算符</p><ul><li>&amp;&amp;：逻辑与运算，两个变量都为真，结果才为true</li><li>||：逻辑或运算，两个变量有一个为真，则结果才会true</li><li>！：取反，如果是真，则变为假，如果是假，则变为真</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a&amp;&amp;b："</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">&amp;&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//与</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a||b："</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">||</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//或</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"!(a&amp;&amp;b)："</span><span class="token operator">+</span><span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token operator">&amp;&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取反</span>输出：a<span class="token operator">&amp;&amp;</span>b：<span class="token boolean">false</span>a<span class="token operator">||</span>b：<span class="token boolean">true</span><span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token operator">&amp;&amp;</span>b<span class="token punctuation">)</span>：<span class="token boolean">true</span></code></pre></li><li><p>位运算</p><ul><li>&amp;：与，全1为1，有0则0</li><li>｜：或，有1则1，全0为0</li><li>^：异或，不同为1，相同为0</li><li>～：非，取反</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*   A = 0011 1100   B = 0000 1101   与，全1为1，有0则0   A&amp;B = 0000 1100   或，有1则1，全0为0   A|B = 0011 1101   异或，不同为1，相同为0   A^B = 0011 0001   ～：非，取反   ~B = 1111 010 */</span></code></pre><ul><li><p>&lt;&lt;：左移运算 </p><ul><li>数值value向左移动num位，左边二进制位丢弃，右边补0。（注意byte和short类型移位运算时会变成int型，结果要强制转换）</li><li>若1被移位到最左侧，则变成负数。</li><li>左移时舍弃位不包含1，则<strong>左移一次，相当于乘2</strong></li></ul></li><li><p>(&gt;&gt;)：右移运算，这里加括号是防止Tycora将&gt;转换引用方式</p><ul><li>数值value向右移动num位，正数左补0，负数左补1，右边舍弃。（即保留符号位）</li><li>右移一次，相当于除以2，并舍弃余数。</li><li>无符号右移&gt;&gt;&gt;：左边位用0补充，右边丢弃。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    0000 0000   0    0000 0001   1    0000 0010   2    0000 0011   3    0000 0100   4    0000 1000   8    0001 0000   16 */</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"左移运算："</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"右移运算："</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出：左移运算：<span class="token number">16</span>右移运算：<span class="token number">2</span></code></pre></li></ul></li><li><p>三元运算：</p><ul><li>条件表达式?表达式1:表达式2</li><li>其逻辑为：“如果条件表达式成立或者满足则执行表达式1，否则执行第二个。”常用在设置默认值,例如某个值不一定存在,则判断这个值是否存在,不存在给默认值(表达式2)。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//x ? y : z</span><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>String result <span class="token operator">=</span> score <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token operator">?</span> <span class="token string">"不及格"</span> <span class="token operator">:</span> <span class="token string">"及格"</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>输出：不及格  </code></pre></li></ul><h4 id="运算符优先级："><a href="#运算符优先级：" class="headerlink" title="运算符优先级："></a>运算符优先级：</h4><table><thead><tr><th align="center"><strong>优先级</strong></th><th align="center"><strong>运算符</strong></th><th align="center"><strong>简介</strong></th><th align="center"><strong>结合性</strong></th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>[ ]</code>、<code> .</code>、<code>( )</code></td><td align="center">方法调用，属性获取</td><td align="center">从左向右</td></tr><tr><td align="center">2</td><td align="center">!、~、 ++、 –</td><td align="center">一元运算符</td><td align="center">从右向左</td></tr><tr><td align="center">3</td><td align="center">* 、/ 、%</td><td align="center">乘、除、取模（余数）</td><td align="center">从左向右</td></tr><tr><td align="center">4</td><td align="center">+ 、 -</td><td align="center">加减法</td><td align="center">从左向右</td></tr><tr><td align="center">5</td><td align="center">&lt;&lt;、 &gt;&gt;、 &gt;&gt;&gt;</td><td align="center">左位移、右位移、无符号右移</td><td align="center">从左向右</td></tr><tr><td align="center">6</td><td align="center">&lt; 、&lt;= 、&gt;、 &gt;=、 instanceof</td><td align="center">小于、小于等于、大于、大于等于， 对象类型<br />判断是否属于同类型</td><td align="center">从左向右</td></tr><tr><td align="center">7</td><td align="center">== 、!=</td><td align="center">2个值是否相等，2个值是否不等于。 下面有详<br />细的解释</td><td align="center">从左向右</td></tr><tr><td align="center">8</td><td align="center">&amp;</td><td align="center">按位与</td><td align="center">从左向右</td></tr><tr><td align="center">9</td><td align="center">^</td><td align="center">按位异或</td><td align="center">从左向右</td></tr><tr><td align="center">10</td><td align="center">|</td><td align="center">按位或</td><td align="center">从左向右</td></tr><tr><td align="center">11</td><td align="center">&amp;&amp;</td><td align="center">短路与</td><td align="center">从左向右</td></tr><tr><td align="center">12</td><td align="center">||</td><td align="center">短路或</td><td align="center">从左向右</td></tr><tr><td align="center">13</td><td align="center">?:</td><td align="center">条件运算符</td><td align="center">从右向左</td></tr><tr><td align="center">14</td><td align="center">=、 += 、-= 、*= 、/=、<br /> %=、 &amp;=、 |=、 ^=、 &lt;、&lt;= 、&gt;、&gt;= 、&gt;&gt;=</td><td align="center">混合赋值运算符</td><td align="center">从右向左</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(06)-变量、常量</title>
      <link href="/2021/12/23/javase-06-bian-liang-chang-liang/"/>
      <url>/2021/12/23/javase-06-bian-liang-chang-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="变量、常量"><a href="#变量、常量" class="headerlink" title="变量、常量"></a>变量、常量</h1><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>简述：</p><ul><li>变量是什么：就是可以变化的量</li><li>Java是一种强类型语言，每个变量都<strong>必须声明其类型</strong> </li><li>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型、<strong>作用域</strong></li></ul><pre><code>type varName [=value][&#123;,varName[=value]&#125;];//数据类型    变量名=值;    可以使用逗号隔开来声明多个同类型变量（非常不推荐）</code></pre><p>注意事项：</p><ul><li>每个变量都有类型，类型可以是<strong>基本类型</strong>，也可以是引用类型</li><li>变量名必须是<strong>合法的标识符</strong></li><li>变量声明是一条完整的语句，因此每一个声明都以分号结尾</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token string">'X'</span><span class="token punctuation">;</span>String name <span class="token operator">=</span> <span class="token string">"codepigpig"</span><span class="token punctuation">;</span><span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span></code></pre><p>变量作用域：</p><ul><li>类变量（静态变量）：<ul><li>书写：变量前加static</li><li>作用范围：整个类都可以通用</li><li>默认值：无</li><li>内存位置：位于全局区</li><li>生命周期：static变量的生命周期取决于类的生命周期</li></ul></li><li>实例变量（成员变量）：<ul><li>代码位置：在方法的外部，直接写在类当中</li><li>作用范围：整个类都可以通用</li><li>默认值：有</li><li>内存位置：位于堆内存</li><li>生命周期：随对象的创建而诞生，随着对象被垃圾处理而消失</li></ul></li><li>局部变量<ul><li>代码位置：在方法的内部</li><li>作用范围：只有方法当中可以用，出了方法就就不能再用了</li><li>默认值：无</li><li>内存位置：位于栈内存</li><li>生命周期：随方法进栈而诞生，随着方法出栈而消失</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo7</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//类变量 static</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> salary <span class="token operator">=</span> <span class="token number">6666</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//属性：变量</span>    <span class="token comment" spellcheck="true">//实例变量(成员变量)：从属于对象,如果不自行进行初始化，这个类型的默认值为 0 0.0 u0000</span>    <span class="token comment" spellcheck="true">//布尔值：默认是false</span>    <span class="token comment" spellcheck="true">//除了基本类型，其他的默认值都是null</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//静态代码块，程序运行时顺序执行一次</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//main方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//局部变量：必须声明和初始化值</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//变量类型  变量名字  = new Demo7();</span>        Demo7 demo7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo7<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo7<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//类变量，可以输出</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//其他方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>  输出：<span class="token number">1</span>null<span class="token number">0</span><span class="token number">6666.0</span>  </code></pre><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>简述：</p><ul><li>常量(Constant)：初始化(initialize)后不能再改变值！不会变动的值</li><li>所谓常量可以理解成一种特殊的变量，它的值被设定后，在程序运行过程中不允许被改变</li><li>常量名一般使用大写字符</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//修饰符，不存在先后次序</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：<span class="token number">3.14</span></code></pre><h4 id="变量的命令规范："><a href="#变量的命令规范：" class="headerlink" title="变量的命令规范："></a>变量的命令规范：</h4><ul><li>所有变量、方法、类名：见名知意</li><li>类成员变量：首字母小写和驼峰原则：firstName、lastName</li><li>局部变量：首字母小写和驼峰原则</li><li>常量：大写字母和下划线：MAX_VALUE</li><li>类名：首字母大写和驼峰原则：Demo、MyFirstClass</li><li>方法名：首字母小写和驼峰原则：find()、findAll()</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 变量 </tag>
            
            <tag> 常量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(05)-Java数据类转换</title>
      <link href="/2021/12/23/javase-05-java-shu-ju-lei-zhuan-huan/"/>
      <url>/2021/12/23/javase-05-java-shu-ju-lei-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="Java数据类转换"><a href="#Java数据类转换" class="headerlink" title="Java数据类转换"></a>Java数据类转换</h1><p>简述：</p><ul><li>由于Java是强类型语言，所以要进行有序运算的时候，需要用到类型转换</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//低----------------------->高</span><span class="token keyword">byte</span><span class="token punctuation">,</span><span class="token keyword">short</span><span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token keyword">int</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token keyword">long</span> <span class="token operator">--</span><span class="token operator">></span><span class="token keyword">float</span> <span class="token operator">--</span><span class="token operator">></span><span class="token keyword">double</span></code></pre><p>转换类型：</p><ul><li>强制类型转换<ul><li>格式：(类型)变量名        高 –&gt; 低</li></ul></li><li>自动类型转换<ul><li>格式：(类型)变量名        低 –&gt; 高</li></ul></li></ul><p>注意点：</p><ul><li>不能对布尔值进行转换</li><li> 不能把对象类型转为不相干的类型</li><li>在把高容量转换到第低容量的时候，强制转换</li><li>转换的嘶吼可能存在内存溢出，或者精度缺失情况</li></ul><p>常见问题：</p><ul><li><p>内存溢出情况：</p></li><li><p>byte占1个字节范围：-128～127，这里byte（低）向int（高）转换，导致内存溢出，输出结果不正确</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//byte最大</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>输出结果<span class="token number">128</span><span class="token operator">-</span><span class="token number">128</span></code></pre><ul><li> 精度缺失情况：</li><li>原因：低–&gt;高转换，整数时，int类型向下取整，负数时，向上取整，导致数据的精度缺失</li></ul><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">23.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">45.89f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出结果：<span class="token number">23</span><span class="token operator">-</span><span class="token number">45</span></code></pre><ul><li>字符类型和int类型相互转换</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//'a'对应的ASCLL表中的十进制为97</span><span class="token keyword">int</span> d <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将‘a’强制转换为int类型，结果为97</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将int类型强制转换为char类型，结果为'b'</span>输出：<span class="token number">97</span><span class="token number">98</span>b</code></pre><ul><li>操作比较大的数的时候，注意溢出问题，</li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">int</span> money <span class="token operator">=</span> 10_0000_0000<span class="token punctuation">;</span> <span class="token keyword">int</span> years <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token keyword">int</span> total <span class="token operator">=</span> money<span class="token operator">*</span>years<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-1474836480，计算的时候溢出了</span> <span class="token keyword">long</span> total2 <span class="token operator">=</span> money<span class="token operator">*</span>years<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认是int，转换之前已经存在问题了</span> <span class="token keyword">long</span> total3 <span class="token operator">=</span> money<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> years<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先将一个数转换为long</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total2<span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total3<span class="token punctuation">)</span><span class="token punctuation">;</span>输出：<span class="token operator">-</span><span class="token number">1474836480</span><span class="token operator">-</span><span class="token number">1474836480</span><span class="token number">20000000000</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(04)-基本数据类型的拓展</title>
      <link href="/2021/12/23/javase-04-ji-ben-shu-ju-lei-xing-de-tuo-zhan/"/>
      <url>/2021/12/23/javase-04-ji-ben-shu-ju-lei-xing-de-tuo-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="基本数据类型的拓展"><a href="#基本数据类型的拓展" class="headerlink" title="基本数据类型的拓展"></a>基本数据类型的拓展</h1><h4 id="一、整数类型拓展："><a href="#一、整数类型拓展：" class="headerlink" title="一、整数类型拓展："></a>一、整数类型拓展：</h4><ul><li><p>二进制</p></li><li><p>十进制0b</p></li><li><p>八进制0</p></li><li><p>十六进制0x</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//十进制</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">0b10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//二进制0b</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">010</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//八进制0</span><span class="token keyword">int</span> i3 <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//十六进制  0~9 A~F 16</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>ystem<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3<span class="token punctuation">)</span><span class="token punctuation">;</span>输出：<span class="token number">10</span><span class="token number">2</span><span class="token number">8</span><span class="token number">16</span></code></pre></li></ul><h4 id="二、浮点数拓展："><a href="#二、浮点数拓展：" class="headerlink" title="二、浮点数拓展："></a>二、浮点数拓展：</h4><ul><li>float 有限的、离线的、舍入误差、大约接近</li><li>最好完全避免用浮点数进行比较，不可将浮点变量用“==”或“！=”做直接比较，原因是由于浮点型的精度是有限的，经过运算就可能存在舍入误差</li><li>银行类型数据用：BigDecimal（数学工具类）</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">0.1f</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">23232323f</span><span class="token punctuation">;</span><span class="token keyword">double</span> d1 <span class="token operator">=</span> f1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token operator">==</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token operator">==</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>输出：<span class="token boolean">false</span>ture </code></pre><h4 id="三、字符拓展："><a href="#三、字符拓展：" class="headerlink" title="三、字符拓展："></a>三、字符拓展：</h4><ul><li><p>字符转换为数字，所有的字符本质上还是数字</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token string">'中'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>输出：a<span class="token number">97</span>中<span class="token number">20013</span></code></pre></li><li><p>Unicode字符底层十六进制转换字符</p><pre class=" language-java"><code class="language-java"><span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token string">'\u0061'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token string">'\u002b'</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c4<span class="token punctuation">)</span><span class="token punctuation">;</span>输出：a<span class="token operator">+</span></code></pre></li><li><p>转义字符 \t制表符（作用是跳格）、\n换行</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello\tWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello\nWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出：Hello    WorldHelloWorld</code></pre></li></ul><h4 id="四、布尔值扩展："><a href="#四、布尔值扩展：" class="headerlink" title="四、布尔值扩展："></a>四、布尔值扩展：</h4><ul><li><p>精简代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//新手推荐使用</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//熟手推荐使用</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Less is More！代码要精简易读</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(03)-Java数据类型</title>
      <link href="/2021/12/23/javase-03-java-shu-ju-lei-xing/"/>
      <url>/2021/12/23/javase-03-java-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><p>强类型语言：</p><ul><li>简述：要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用，数据类型想要改变必须经过强制转换。</li><li>优点：安全性高</li><li>缺点：速度慢</li><li>代表语言：Java、Python、C++</li></ul></li><li><p>弱类型语言：</p><ul><li>简述：当一个变量定义类型后，该变量可以根据环境变化自动进行转换，不需要经过显性强制转换。</li><li>优点：速度快</li><li>缺点：安全性低，容易造成不必要的错误</li><li>代表语言：JavaScript、PHP</li></ul></li><li><p>Java的数据类型分类两大类</p><ul><li>提前科普：什么是字节<ul><li>位（bit）：是计算机内部数据储存的最小单位，11001100是一个八位二进制数</li><li>字节（byte）：是计算机中数据处理的基本单位，习惯上用大写B来表示</li><li>1B（btye，字节） = 8bit（位）</li><li>字符：是指计算机中使用的字母、数字、字和符号</li></ul></li></ul></li><li><p>基本类型（primitive type）</p><ul><li>数值类型<ul><li>整数类型<ul><li>byte 占1个字节范围：-128-127        </li><li>short 占2个字节范围：-32768-32727</li><li>int 占4个字节范围：-2147483648-2147483647</li><li>long 占8个字节范围：-9223372003685477588-9223372036854775807</li></ul></li><li>浮点数类型<ul><li>float 占4个字节</li><li>double 占8个字节</li></ul></li><li>字符类型<ul><li>char 占2个字节</li></ul></li></ul></li><li>boolean类型<ul><li>true 占1个字节</li><li>false 占1个字节</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//八大基本数据类型</span><span class="token comment" spellcheck="true">//整型</span><span class="token keyword">byte</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">short</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//最常用</span><span class="token keyword">long</span> num4 <span class="token operator">=</span> 40L<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Long类型要在数字后面加上L</span><span class="token comment" spellcheck="true">//小数：浮点数</span><span class="token keyword">float</span> num5 <span class="token operator">=</span> <span class="token number">50.1F</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Lfloat类型要在数字后面加上F</span><span class="token keyword">double</span> num6 <span class="token operator">=</span> <span class="token number">3.141592</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符</span><span class="token keyword">char</span> name <span class="token operator">=</span> <span class="token string">'王'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字符类型使用的是''</span><span class="token comment" spellcheck="true">//布尔值：是非</span><span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//boolean flag = false;</span><span class="token comment" spellcheck="true">//查看数据范围，定义包装类，右击Integer -> Go To -> Declaration or Usages</span>Integer num7 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>引用类型（reference type）</p><ul><li>类</li><li>接口</li><li>数组</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(02)-注释、标识符、关键字</title>
      <link href="/2021/12/23/javase-02-zhu-shi-biao-shi-fu-guan-jian-zi/"/>
      <url>/2021/12/23/javase-02-zhu-shi-biao-shi-fu-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h3 id="注释、标识符、关键字"><a href="#注释、标识符、关键字" class="headerlink" title="注释、标识符、关键字"></a>注释、标识符、关键字</h3><ul><li><p><strong>注释</strong>：注释并不会被执行，书写注释是一个非常好的习惯。</p><ul><li>单行注释</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//单行注释</span></code></pre><ul><li>多行注释</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*   多行注释   多行注释*/</span></code></pre><ul><li>文档注释</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Desripiton HelloWorld * @Author CodePigPig */</span></code></pre></li><li><p><strong>关键字</strong>：Java关键字是<a href="https://baike.baidu.com/item/%E7%94%B5%E8%84%91%E8%AF%AD%E8%A8%80/7105622">电脑语言</a>里事先定义的，有特别意义的<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AF%86%E7%AC%A6/7105638">标识符</a>，有时又叫<a href="https://baike.baidu.com/item/%E4%BF%9D%E7%95%99%E5%AD%97/7674788">保留字</a>，还有特别意义的变量。关键字不能用作变量名、方法名、类名、包名和参数。</p></li></ul><table><thead><tr><th align="left">private</th><th align="left">一种访问控制方式：私用模式</th></tr></thead><tbody><tr><td align="left">protected</td><td align="left">一种访问控制方式：保护模式</td></tr><tr><td align="left">public</td><td align="left">一种访问控制方式：共用模式</td></tr><tr><td align="left">abstract</td><td align="left">表明类或者成员方法具有抽象属性</td></tr><tr><td align="left">class</td><td align="left">类</td></tr><tr><td align="left">extends</td><td align="left">表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td align="left">final</td><td align="left">用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变</td></tr><tr><td align="left">implements</td><td align="left">表明一个类实现了给定的接口</td></tr><tr><td align="left">interface</td><td align="left">接口</td></tr><tr><td align="left">native</td><td align="left">用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td></tr><tr><td align="left">new</td><td align="left">用来创建新实例对象</td></tr><tr><td align="left">static</td><td align="left">表明具有静态属性</td></tr><tr><td align="left">strictfp</td><td align="left">用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754算术规范</td></tr><tr><td align="left">synchronized</td><td align="left">表明一段代码需要同步执行</td></tr><tr><td align="left">transient</td><td align="left">声明不用序列化的成员域</td></tr><tr><td align="left">volatile</td><td align="left">表明两个或者多个变量必须同步地发生变化</td></tr><tr><td align="left">break</td><td align="left">提前跳出一个块</td></tr><tr><td align="left">continue</td><td align="left">回到一个块的开始处</td></tr><tr><td align="left">return</td><td align="left">从成员方法中返回数据</td></tr><tr><td align="left">do</td><td align="left">用在do-while循环结构中</td></tr><tr><td align="left">while</td><td align="left">用在循环结构中</td></tr><tr><td align="left">if</td><td align="left">条件语句的引导词</td></tr><tr><td align="left">else</td><td align="left">用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td align="left">for</td><td align="left">一种循环结构的引导词</td></tr><tr><td align="left">instanceof</td><td align="left">用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td align="left">switch</td><td align="left">分支语句结构的引导词</td></tr><tr><td align="left">case</td><td align="left">用在switch语句之中，表示其中的一个分支</td></tr><tr><td align="left">default</td><td align="left">默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td align="left">try</td><td align="left">尝试一个可能抛出异常的程序块</td></tr><tr><td align="left">catch</td><td align="left">用在异常处理中，用来捕捉异常</td></tr><tr><td align="left">throw</td><td align="left">抛出一个异常</td></tr><tr><td align="left">throws</td><td align="left">声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td align="left">import</td><td align="left">表明要访问指定的类或包</td></tr><tr><td align="left">package</td><td align="left">包</td></tr><tr><td align="left">boolean</td><td align="left">基本数据类型之一，布尔类型</td></tr><tr><td align="left">byte</td><td align="left">基本数据类型之一，字节类型</td></tr><tr><td align="left">char</td><td align="left">基本数据类型之一，字符类型</td></tr><tr><td align="left">double</td><td align="left">基本数据类型之一，双精度浮点数类型</td></tr><tr><td align="left">float</td><td align="left">基本数据类型之一，单精度浮点数类型</td></tr><tr><td align="left">int</td><td align="left">基本数据类型之一，整数类型</td></tr><tr><td align="left">long</td><td align="left">基本数据类型之一，长整数类型</td></tr><tr><td align="left">short</td><td align="left">基本数据类型之一,短整数类型</td></tr><tr><td align="left">null</td><td align="left">空</td></tr><tr><td align="left">true</td><td align="left">正确</td></tr><tr><td align="left">false</td><td align="left">错误</td></tr><tr><td align="left">super</td><td align="left">表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td align="left">this</td><td align="left">指向当前实例对象的引用</td></tr><tr><td align="left">void</td><td align="left">声明当前成员方法没有返回值</td></tr><tr><td align="left">goto</td><td align="left">保留关键字，没有具体含义</td></tr><tr><td align="left">const</td><td align="left">保留关键字，没有具体含义</td></tr></tbody></table><ul><li><strong>标识符</strong>：程序员自己命名的单词叫做标识符，可以标识：类名、方法名、变量名、接口名、常量名……<ul><li>所有的标识符都应该以字母（A-Z或者a-z）、美元符（$）、或者下划线（_）开始</li><li>首字符之后可以是字母（A-Z或者a-z）、美元符（$）、或者下划线（_）或者数字的任何字符组成</li><li>不能使用关键字作为变量名或者方法名</li><li>标识符是大小写名感的</li><li>合法标识符举例：age、$salary、_value、__1_value</li><li>非法标识符举例：123abc、-salary、#abc</li><li><strong>可以使用中文命名，但是非常不建议，更不建议使用拼音</strong></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注释 </tag>
            
            <tag> 标识符 </tag>
            
            <tag> 关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE(01)-Java特性、版本、JDK等</title>
      <link href="/2021/12/23/javase-01-java-te-xing-ban-ben-jdk-deng/"/>
      <url>/2021/12/23/javase-01-java-te-xing-ban-ben-jdk-deng/</url>
      
        <content type="html"><![CDATA[<h1 id="Java特性、版本、JDK等"><a href="#Java特性、版本、JDK等" class="headerlink" title="Java特性、版本、JDK等"></a>Java特性、版本、JDK等</h1><h2 id="Java特性和优势"><a href="#Java特性和优势" class="headerlink" title="Java特性和优势"></a>Java特性和优势</h2><ul><li>简单性</li><li>面向对象</li><li>可移植性（跨平台移植）write once run anywhere</li><li>高性能</li><li>分布式</li><li>动态性</li><li>多线程</li><li>安全性</li><li>健壮性</li></ul><h2 id="Java的三大版本"><a href="#Java的三大版本" class="headerlink" title="Java的三大版本"></a>Java的三大版本</h2><ul><li>JavaSE：标准版（桌面程序，控制台开发……）</li><li>JavaME：嵌入式开发（手机，小家电……）</li><li>JavaEE：E企业级开发（web端，服务器开发）</li></ul><h2 id="JDK、JRE、JVM介绍"><a href="#JDK、JRE、JVM介绍" class="headerlink" title="JDK、JRE、JVM介绍"></a>JDK、JRE、JVM介绍</h2><ul><li>JDK：Java Development Kit<ul><li>java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。JDK包含了JRE</li></ul></li><li>JRE：Java Runtime Environment<ul><li>java运行时环境，包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用户使用的</li></ul></li><li>JVM：Java Virtual Machine<ul><li>通过JVM虚拟机屏蔽了底层系统的差别，实现了一次编译到处运行</li></ul></li><li>图解<br><img src="https://gitee.com/codePigPig/blogImages/raw/master/uPic/C1B263D5-996B-4767-A7E7-9A07A2D426FC.png" alt="Java"></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/20/hello-world/"/>
      <url>/2021/12/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
